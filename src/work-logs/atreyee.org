#+TITLE: Atreyee Ghosal - Time sheet
#+AUTHOR: Atreyee Ghosal
#+DATE: [2017-06-01 Fri]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document hols the time sheets for my work during the summer internship
  at VLEAD, IIIT Hyderabad

* Month of June
** Week 1 [2017-06-01 Thu] till [2017-06-04 Sun]
   + [2017-06-01 Thu] -
     - The mentors were introduced and the projects were assigned in the
       morning.
     - Project currently being worked on is the rewriting of the
       =web-app-short-course= in Haskell.
     - I read the requirements, documentation and code for the =web-app-short-course=
     - I noted ideas on how to implement it in Haskell, and the (intended)
       differences between the original implementation and the Haskell
       implementation. These will be later uploaded in a notes file.
     - I also made a note of problems we will face in the implementation, and
       discussed with my mentor about resources needed
     - Additionally, I compared two Haskell web frameworks- Servant and
       Yesod- to see which one is more appropriate for my implementation.
   + [2017-06-02 Fri] - 
     - The API for the webapp will be realised using the Servant web framework,
       as this web framework ensures the type safety of routes and return
       values.
     - I explored the Servant API tool (using the tutorial provided with the Servant
       documentation) and read three sample projects written in servant
       (including one that uses the Persistent database tool to interact with
       the database layer)
     - I also learned the use of the stack build tool for haskell
     - To test the feasibility of building the API using Servant and to
       familiarise myself with Stack, I built and debugged an example web app with a single
       route that returned a list of users when called
** Week 2 [2017-06-05 Mon] till [2017-06-11 Sun]
   + [2017-06-05 Monday]
     - Had a meeting with Prof. Choppella, my project mentor, in the morning
     - Wrote a skeleton webapp with two routes, =showUsers= and =addUsers=
     - Functions to handle these two routes have not been implemented yet-
       currently using placeholder functions
     - Also wrote a skeleton user data model using template haskell and
       haskell-Persistent
     - Wrote code to connect the skeleton API and the skeleton database model
     - The purpose of doing this is to get a feasible working model of a server
       using the Servant API library and the Persistent database library. Once
       I have such a working model, I can add other aspects of the
       implementation to it. 
     - A significant portion of the afternoon was spent in debugging the code
       (mostly library import issues- added all necessary libraries to
       =webapp-tryout.cabal=)
     - There's a bug in the type naming. Will look at it later
     - All work done today has been committed to the =web=app-haskell=
       repository
   + [2017-06-06 Tuesday]
     - Previous day's error resolved.
     - Went through Haskell theory, particularly relating to the concepts of
       type-level strings, type-level lists and type families.
     - Had an issue with Stack- namely, that it had =src= as the default source
       code directory instead of =build/code=. Issue resolved.
     - Fixed a few more issues. Set =Role= as an ADT- therefore ensuring the
       type-safety of =Role= value. Found out how to write custom FromJSON and
       ToJSON instances of ADTs.
     - Had a meeting with my project mentor- Prof. Choppella- Prof. Soma,
       Prof. Kesav Nori and another professor about projects related to
       linguistics and Haskell, from 11:30am to 1:30pm.
     - Worked on implementing handlers for the /showUsers and /addUsers routes.
   + [2017-06-07 Wednesday]
     - Made a very crude version of the webapp that works.
   + [2017-06-08 Thursday]
     - Worked on implementing login/logout routes.
   + [2017-06-09 Friday]
     - Finished implementation of login/logout routes and index page route. 
     - Gave a presentation about progress in this project so far.

** Week 3 [2017-06-12 Mon] till [2017-06-18 Sun]
   
   + [2017-06-12 Mon]
     - Unsuccessfully attempted to implement authentication.
     - Had a short meeting with the project mentor- Prof. Choppella.
   + [2017-06-13 Tue]
     - Successfully implemented login and admin authentication.
     - Tested the app. Ran into issues.
   + [2017-06-14 Wed]
     - Implemented six routes- /index, /login, /addUser, /showUsers,
       /deleteUser, /logout
     - Wrote a bash script for testing
   + [2017-06-15 Thu]
     - Set up a basic test file system
     - Designed a test suite for the system
     - Explored the haskell hspec library for implementing test suite
     - Read related literature on comparative studies of software programs
   + [2017-06-16 Fri]
     - Had a project presentation in the morning
     - Started implementation of test suite using hspec
** Week 4 [2017-06-19 Mon] till [2017-06-25 Sun]

   + [2017-06-19 Mon]
     - Continued implementation of test suite in hspec
     - Had a meeting with my project mentor in the afternoon
     
   + [2017-06-20 Tue]
     - Fixed an issue with test suite (connection error)
     - Got test suite to successfully run
     - Had a meeting with project mentor. Discussed modularising webapp

   + [2017-06-21 Wed]
     - Wrote test cases for all six routes 
     - Solved test suite issues
     - Test cases all running successfully
     - Started work on making a modular version of the webapp
   + [2017-06-22 Thu]
     - Created a modular version of the webapp
     - Wrote documentation for the webapp code
   + [2017-06-23 Fri]
     - Cloned literate-tools to web-app-haskell repository and
       configured the repository according to the literate-tools
       format
     - Ran a makefile. Makefile issue present: makefile deletes
       build/code directory, thus app unable to run after makefile
     - Worked on literate-tools issue (also raised an issue
       in the github repository)
     - Attended a code review from 11.00am to 2.00pm
     - Attended tech talk in the afternoon from 4:30om
       
** Week 5 [2017-06-26 Mon] till [2017-07-02 Sun]

   + [2017-06-27 Tue]
     - Started work on NLP applications in Haskell
     - Read through papers on dependency parsing techniques (papers
       provided in reading list) and paper Dependency 
       Grammars as Haskell Programs
     - Wrote a tutorial implementing the parser engine from
       the paper. The purpose of writing this is to under-
       stand the parser engine demonstrated in the paper,
       as well as to make a demonstration tool to explain the 
       paper.
   + [2017-06-28 Wed]
     - Leave
   + [2017-06-29 Thu]
     - Worked on completing web-app-haskell according to web-app-short-course
       requirements
     - Built a working dependency parser (that parses a small subset of English
       sentences)
   + [2017-06-30 Fri]
     - Worked on expanding the sample grammar for the dependency 
       parser, including adding support for rules and constraints
     - Had a meeting with my project mentor, in which I presented 
       the paper Dependency Grammars as Haskell Programs, and my 
       implementation of the parser
     - Attended a tech talk in the afternoon
* Month of July

** Week 6 [2017-07-03 Mon] till [2017-07-09 Sun]

   + [2017-07-03 Mon]
     - Implemented remaining functionality of web-app-haskell.
     - Debugged the implemented code
     - Designed an expanded, complete test suite for web-app-haskell
     - Made slides to be presented at meeting tomorrow
   + [2017-07-04 Tue]
     - Implemented most of test suite for web-app-haskell
     - Had a meeting with LTRC professors for project. Presented the paper
       Dependency Grammars as Haskell Programs to them
   + [2017-07-05 Wed]
     - Had a meeting with LTRC professors for NLP project. Our current aim is
       to use the existing haskell Grammatical Framework environment and study 
       how it does not meet their requirements for a grammatical framework, and
       attempt to refactor the GF environment to be more suitable to their
       uses.
     - Downloaded GF, and looked through the tutorial on GF. Learned the basics
       of using GF.
     - Finished test suite for web-app-haskell.
   + [2017-07-06 Thurs]
     - Read through GF tutorial.
     - Wrote a script to measure non-comment non-whitespace lines 
       of code in a program, and ran it for both the Haskell
       program and the Python webapp
     - Attempted to find documentation for GF Resource Grammar
       libraries
   + [2017-07-07 Fri]
     - Read more of the GF tutorial. Got an idea of how the
       Resource Grammar framework is used
     - Wrote part of the Haskell/Python comparison study paper
     
